// <auto-generated />
using System;
using Elaborate.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Elaborate.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230312145327_tabela_akcje")]
    partial class tabela_akcje
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Elaborate.Elaborate.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varchar(60)")
                        .HasMaxLength(60);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Elaborate.Elaborate.Entities.TransCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("image")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TransCategories");
                });

            modelBuilder.Entity("Elaborate.Elaborate.Entities.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TransCategoryId")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("TransCategoryId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Elaborate.Entities.InvestmentCryptoCurrency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("TypeCryptoCurrencyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("TypeCryptoCurrencyId");

                    b.ToTable("InvestmentCryptoCurrencies");
                });

            modelBuilder.Entity("Elaborate.Entities.InvestmentPreciousMetal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<int>("TypePreciousMetalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("TypePreciousMetalId");

                    b.ToTable("InvestmentsPreciousMetals");
                });

            modelBuilder.Entity("Elaborate.Entities.InvestmentStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<int>("TypeStockId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("TypeStockId");

                    b.ToTable("InvestmentStocks");
                });

            modelBuilder.Entity("Elaborate.Entities.TypeCryptoCurrency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("image")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TypeCryptoCurrencies");
                });

            modelBuilder.Entity("Elaborate.Entities.TypePreciousMetal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("image")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TypesPreciousMetals");
                });

            modelBuilder.Entity("Elaborate.Entities.TypeStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("image")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TypeStocks");
                });

            modelBuilder.Entity("Elaborate.Elaborate.Entities.Transaction", b =>
                {
                    b.HasOne("Elaborate.Elaborate.Entities.Account", "Account")
                        .WithMany("ListOfTransactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elaborate.Elaborate.Entities.TransCategory", "TransCategory")
                        .WithMany()
                        .HasForeignKey("TransCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Elaborate.Entities.InvestmentCryptoCurrency", b =>
                {
                    b.HasOne("Elaborate.Elaborate.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elaborate.Entities.TypeCryptoCurrency", "TypeCryptoCurrency")
                        .WithMany()
                        .HasForeignKey("TypeCryptoCurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Elaborate.Entities.InvestmentPreciousMetal", b =>
                {
                    b.HasOne("Elaborate.Elaborate.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elaborate.Entities.TypePreciousMetal", "TypePreciousMetal")
                        .WithMany()
                        .HasForeignKey("TypePreciousMetalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Elaborate.Entities.InvestmentStock", b =>
                {
                    b.HasOne("Elaborate.Elaborate.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elaborate.Entities.TypeStock", "TypeStock")
                        .WithMany()
                        .HasForeignKey("TypeStockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
